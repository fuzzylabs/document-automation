version: 2.1

executors:
  python:
    docker:
      - image: circleci/python
    environment:
      GOOGLE_PROJECT_GROUP: "document-automation"
  google-cloud:
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_GROUP: "document-automation"
      REGION: "europe-west1"
      GOOGLE_REGISTRY_REGION: "eu.gcr.io"
      TERRAGRUNT_VERSION: "0.19.9"
      TERRAFORM_VERSION: "0.12.5"

commands:
  should_i_build:
    description: "A step to test if we should build this service"
    parameters:
      service:
        type: string
    steps:
      - run: git diff --name-only $(git log -n 2 --pretty=format:"%H") | egrep ^<< parameters.service >> || circleci-agent step halt

jobs:
  ## Classifier Backend Jobs
  test_classifier:
    executor: python
    steps:
      - checkout
      - should_i_build:
          service: "functions/classify"
      - run:
          name: Unit Test
          command: env && echo true
  build_and_publish_classifier:
    executor: google-cloud
    environment:
      - ENV: "dev"
      - GOOGLE_STORAGE_BUCKET_URL: "gs://107906084271_fuzzylabs_document-automation_dev_cloud-functions"
    steps:
      - checkout
      - should_i_build:
          service: "functions/classify"
      - run:
          name: Create Cloud Function Classify Zip File
          command: |
            apt-get install -qq -y zip
            pushd functions/classify
            zip -r classify-${CIRCLE_SHA1}.zip .
            popd
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_GROUP}-${ENV}
      - run:
          name: Push content to bucket
          command: gsutil -m cp functions/classify/classify-${CIRCLE_SHA1}.zip ${GOOGLE_STORAGE_BUCKET_URL}
  deploy_classifier_to_dev:
    executor: google-cloud
    environment:
      - ENV: "dev"
    steps:
      - checkout
      - should_i_build:
          service: "functions/classify"
      - run:
          name: Install Terragrunt and Terraform
          command: |
            apt-get install -qq -y curl unzip
            curl -sL https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_386 -o /bin/terragrunt
            chmod +x /bin/terragrunt
            curl -sL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o /tmp/terraform.zip
            unzip /tmp/terraform.zip -d /bin
      - run:
          name: Terragrunt Apply
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            pushd terraform/${ENV}/${REGION}/services/cloud_functions
            terragrunt apply -var classify_zipfile=classify-${CIRCLE_SHA1}.zip --auto-approve
            popd
  ## Document Client Jobs
  test_document_client:
    executor: python
    steps:
      - checkout
      - should_i_build:
          service: "client"
      - run:
          name: Unit Test
          command: env && echo true
  build_and_publish_document_client:
    executor: google-cloud
    environment:
      - ENV: "dev"
    steps:
      - checkout
      - should_i_build:
          service: "client"
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            pushd client
            docker build -t ${GOOGLE_REGISTRY_REGION}/${GOOGLE_PROJECT_GROUP}-${ENV}/document-client:${CIRCLE_SHA1} .
            popd
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_GROUP}-${ENV}
            gcloud auth configure-docker
      - run:
          name: Push to Docker Registry
          command: docker push ${GOOGLE_REGISTRY_REGION}/${GOOGLE_PROJECT_GROUP}-${ENV}/document-client:${CIRCLE_SHA1}
  deploy_document_client_to_dev:
    executor: google-cloud
    environment:
      - ENV: "dev"
    steps:
      - checkout
      - should_i_build:
          service: "client"
      - run:
          name: Install Terragrunt and Terraform
          command: |
            apt-get install -qq -y curl unzip
            curl -sL https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_386 -o /bin/terragrunt
            chmod +x /bin/terragrunt
            curl -sL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o /tmp/terraform.zip
            unzip /tmp/terraform.zip -d /bin
      - run:
          name: Terragrunt Apply
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            pushd terraform/${ENV}/${REGION}/services/cloud_run_services
            terragrunt apply -var document_client_image=${GOOGLE_REGISTRY_REGION}/${GOOGLE_PROJECT_GROUP}-${ENV}/document-client:${CIRCLE_SHA1} --auto-approve
            popd

# Workflows determine the order of the defined jobs.
workflows:
  ## Backend Classifier Workflow
  test_build_deploy_classifier:
    jobs:
      - test_classifier
      - build_and_publish_classifier:
          requires:
            - test_classifier
          #filters:
          #  branches:
          #    only:
          #      - master
      - deploy_classifier_to_dev:
          requires:
            - build_and_publish_classifier
  ## Document Client Workflow
  test_build_deploy_document_client:
    jobs:
      - test_document_client
      - build_and_publish_document_client:
          requires:
            - test_document_client
          #filters:
          #  branches:
          #    only:
          #      - master
      - deploy_document_client_to_dev:
          requires:
            - build_and_publish_document_client
